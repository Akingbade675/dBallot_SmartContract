{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextElectionDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DBallot__InvalidCandidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DBallot__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DBallot__VoterHasVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DBallot__VotingPeriodHasEnded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_partyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_logoUrl",
          "type": "string"
        }
      ],
      "name": "addCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextElectionDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getResults",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "partyName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "logoUrl",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DBallot.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_candidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "partyName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "logoUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_nextElectionDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalCandidatesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "setNextElectionDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x627a188966de1f9712348941cec9480e3cfcd12f662276bbc2eefc1c0426681f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1213461",
    "logsBloom": "0x
    "blockHash": "0xaa3488757dbac25c66236caeee75f1980c0bb2a8029d40760ee72a0050bd9cbf",
    "transactionHash": "0x627a188966de1f9712348941cec9480e3cfcd12f662276bbc2eefc1c0426681f",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1213461",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1679875165,
    3600
  ],
  "numDeployments": 1,
  "solcInputHash": "7c8db1bc9a4c1607a3d480b29ed9f008",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextElectionDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DBallot__InvalidCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DBallot__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DBallot__VoterHasVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DBallot__VotingPeriodHasEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_partyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_logoUrl\",\"type\":\"string\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextElectionDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"partyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logoUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct DBallot.Candidate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_candidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"partyName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logoUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_nextElectionDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalCandidatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setNextElectionDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Abdulbasit Akingbade\",\"details\":\"A simple voting contract\",\"kind\":\"dev\",\"methods\":{\"addCandidate(string,string,string)\":{\"params\":{\"_description\":\"the description of the party\",\"_logoUrl\":\"the url of the party logo\",\"_partyName\":\"the name of the party\"}},\"castVote(uint256)\":{\"params\":{\"_candidateId\":\"the id of the candidate\"}},\"constructor\":{\"params\":{\"_nextElectionDate\":\"the next election date in seconds\",\"_votingPeriod\":\"the voting period in seconds\"}}},\"title\":\"DBallot\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DBallot.sol\":\"DBallot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/* Errors */\\r\\nerror DBallot__NotOwner();\\r\\nerror DBallot__VoterHasVoted();\\r\\nerror DBallot__InvalidCandidate();\\r\\nerror DBallot__VotingPeriodHasEnded();\\r\\n\\r\\n/**\\r\\n * @title DBallot\\r\\n * @author Abdulbasit Akingbade\\r\\n * @dev A simple voting contract\\r\\n */\\r\\ncontract DBallot {\\r\\n    address private immutable i_owner;\\r\\n    uint256 public s_nextElectionDate;\\r\\n    uint256 public s_votingPeriod;\\r\\n    uint256 public s_totalCandidatesCount;\\r\\n    uint256 public s_totalVotes;\\r\\n\\r\\n    mapping(uint256 => Candidate) public s_candidates;\\r\\n    mapping(address => Voter) public s_voters;\\r\\n\\r\\n    struct Candidate {\\r\\n        uint256 id;\\r\\n        string partyName;\\r\\n        string description;\\r\\n        string logoUrl;\\r\\n        uint256 voteCount;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        bool hasVoted;\\r\\n        uint256 candidateId;\\r\\n    }\\r\\n\\r\\n    /* Modifiers */\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) revert DBallot__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDuringVotingPeriod() {\\r\\n        if (\\r\\n            block.timestamp > s_nextElectionDate &&\\r\\n            block.timestamp < s_nextElectionDate + s_votingPeriod\\r\\n        ) revert DBallot__VotingPeriodHasEnded();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _nextElectionDate the next election date in seconds\\r\\n     * @param _votingPeriod the voting period in seconds\\r\\n     */\\r\\n    constructor(uint256 _nextElectionDate, uint256 _votingPeriod) {\\r\\n        i_owner = msg.sender;\\r\\n        s_nextElectionDate = _nextElectionDate;\\r\\n        s_votingPeriod = _votingPeriod;\\r\\n    }\\r\\n\\r\\n    // add candidates\\r\\n    /**\\r\\n     * @param _partyName the name of the party\\r\\n     * @param _description the description of the party\\r\\n     * @param _logoUrl the url of the party logo\\r\\n     */\\r\\n    function addCandidate(\\r\\n        string memory _partyName,\\r\\n        string memory _description,\\r\\n        string memory _logoUrl\\r\\n    ) public onlyOwner {\\r\\n        Candidate memory candidate = Candidate({\\r\\n            id: s_totalCandidatesCount,\\r\\n            partyName: _partyName,\\r\\n            description: _description,\\r\\n            logoUrl: _logoUrl,\\r\\n            voteCount: 0\\r\\n        });\\r\\n        s_totalCandidatesCount++;\\r\\n        s_candidates[candidate.id] = candidate;\\r\\n    }\\r\\n\\r\\n    // vote\\r\\n    /**\\r\\n     * @param _candidateId the id of the candidate\\r\\n     */\\r\\n    function castVote(uint256 _candidateId) public onlyDuringVotingPeriod {\\r\\n        // require that they haven't voted before\\r\\n        if (s_voters[msg.sender].hasVoted) revert DBallot__VoterHasVoted();\\r\\n        // require a valid candidate\\r\\n        if (_candidateId >= s_totalCandidatesCount)\\r\\n            revert DBallot__InvalidCandidate();\\r\\n        // record that voter has voted\\r\\n        s_voters[msg.sender] = Voter({\\r\\n            hasVoted: true,\\r\\n            candidateId: _candidateId\\r\\n        });\\r\\n        // update candidate vote Count\\r\\n        s_candidates[_candidateId].voteCount++;\\r\\n        s_totalVotes++;\\r\\n    }\\r\\n\\r\\n    // get results\\r\\n    function getResults() public view returns (Candidate[] memory) {\\r\\n        Candidate[] memory results = new Candidate[](s_totalCandidatesCount);\\r\\n        for (uint256 i = 0; i < s_totalCandidatesCount; i++) {\\r\\n            results[i] = s_candidates[i];\\r\\n        }\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /* Setters */\\r\\n    function setNextElectionDate(uint256) public view returns (uint256) {\\r\\n        return s_nextElectionDate;\\r\\n    }\\r\\n\\r\\n    /* View / Pure functions */\\r\\n    function getNextElectionDate() public view returns (uint256) {\\r\\n        return s_nextElectionDate;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0efbaeee7b52db09bbce20c3ef4a8f309792260b1755416326eb732d22ed2c19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200154f3803806200154f8339818101604052810190620000379190620000c1565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508160008190555080600181905550505062000108565b600080fd5b6000819050919050565b6200009b8162000086565b8114620000a757600080fd5b50565b600081519050620000bb8162000090565b92915050565b60008060408385031215620000db57620000da62000081565b5b6000620000eb85828601620000aa565b9250506020620000fe85828601620000aa565b9150509250929050565b60805161142b6200012460003960006106f5015261142b6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634b467bc7116100715780634b467bc7146101545780636e433ae214610172578063725ae3dc146101a3578063ad71f8dc146101c1578063d7b7f719146101dd578063e02c300914610211576100a9565b806313ca0050146100ae5780632a2d83d9146100cc57806339aeb9f2146100ea5780633eb76b9c1461011a5780634717f97c14610136575b600080fd5b6100b661022f565b6040516100c39190610a51565b60405180910390f35b6100d4610235565b6040516100e19190610a51565b60405180910390f35b61010460048036038101906100ff9190610aac565b61023e565b6040516101119190610a51565b60405180910390f35b610134600480360381019061012f9190610aac565b610249565b005b61013e61042c565b60405161014b9190610cbe565b60405180910390f35b61015c6106b6565b6040516101699190610a51565b60405180910390f35b61018c60048036038101906101879190610d3e565b6106bc565b60405161019a929190610d86565b60405180910390f35b6101ab6106ed565b6040516101b89190610a51565b60405180910390f35b6101db60048036038101906101d69190610ee4565b6106f3565b005b6101f760048036038101906101f29190610aac565b610835565b604051610208959493929190610fd5565b60405180910390f35b610219610a03565b6040516102269190610a51565b60405180910390f35b60005481565b60008054905090565b600080549050919050565b600054421180156102685750600154600054610265919061106c565b42105b1561029f576040517fdc6e686900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610326576040517f97e0293600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002548110610361576040517f336b558300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806040016040528060011515815260200182815250600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015590505060046000828152602001908152602001600020600401600081548092919061040c906110a0565b919050555060036000815480929190610424906110a0565b919050555050565b6060600060025467ffffffffffffffff81111561044c5761044b610db9565b5b60405190808252806020026020018201604052801561048557816020015b610472610a09565b81526020019060019003908161046a5790505b50905060005b6002548110156106ae57600460008281526020019081526020016000206040518060a0016040529081600082015481526020016001820180546104cd90611117565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990611117565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b5050505050815260200160028201805461055f90611117565b80601f016020809104026020016040519081016040528092919081815260200182805461058b90611117565b80156105d85780601f106105ad576101008083540402835291602001916105d8565b820191906000526020600020905b8154815290600101906020018083116105bb57829003601f168201915b505050505081526020016003820180546105f190611117565b80601f016020809104026020016040519081016040528092919081815260200182805461061d90611117565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b505050505081526020016004820154815250508282815181106106905761068f611148565b5b602002602001018190525080806106a6906110a0565b91505061048b565b508091505090565b60025481565b60056020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f209b526700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a00160405280600254815260200185815260200184815260200183815260200160008152509050600260008154809291906107b9906110a0565b91905055508060046000836000015181526020019081526020016000206000820151816000015560208201518160010190816107f59190611323565b50604082015181600201908161080b9190611323565b5060608201518160030190816108219190611323565b506080820151816004015590505050505050565b600460205280600052604060002060009150905080600001549080600101805461085e90611117565b80601f016020809104026020016040519081016040528092919081815260200182805461088a90611117565b80156108d75780601f106108ac576101008083540402835291602001916108d7565b820191906000526020600020905b8154815290600101906020018083116108ba57829003601f168201915b5050505050908060020180546108ec90611117565b80601f016020809104026020016040519081016040528092919081815260200182805461091890611117565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b50505050509080600301805461097a90611117565b80601f01602080910402602001604051908101604052809291908181526020018280546109a690611117565b80156109f35780601f106109c8576101008083540402835291602001916109f3565b820191906000526020600020905b8154815290600101906020018083116109d657829003601f168201915b5050505050908060040154905085565b60035481565b6040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b6000819050919050565b610a4b81610a38565b82525050565b6000602082019050610a666000830184610a42565b92915050565b6000604051905090565b600080fd5b600080fd5b610a8981610a38565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b600060208284031215610ac257610ac1610a76565b5b6000610ad084828501610a97565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b0e81610a38565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b4e578082015181840152602081019050610b33565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b7682610b14565b610b808185610b1f565b9350610b90818560208601610b30565b610b9981610b5a565b840191505092915050565b600060a083016000830151610bbc6000860182610b05565b5060208301518482036020860152610bd48282610b6b565b91505060408301518482036040860152610bee8282610b6b565b91505060608301518482036060860152610c088282610b6b565b9150506080830151610c1d6080860182610b05565b508091505092915050565b6000610c348383610ba4565b905092915050565b6000602082019050919050565b6000610c5482610ad9565b610c5e8185610ae4565b935083602082028501610c7085610af5565b8060005b85811015610cac5784840389528151610c8d8582610c28565b9450610c9883610c3c565b925060208a01995050600181019050610c74565b50829750879550505050505092915050565b60006020820190508181036000830152610cd88184610c49565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0b82610ce0565b9050919050565b610d1b81610d00565b8114610d2657600080fd5b50565b600081359050610d3881610d12565b92915050565b600060208284031215610d5457610d53610a76565b5b6000610d6284828501610d29565b91505092915050565b60008115159050919050565b610d8081610d6b565b82525050565b6000604082019050610d9b6000830185610d77565b610da86020830184610a42565b9392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610df182610b5a565b810181811067ffffffffffffffff82111715610e1057610e0f610db9565b5b80604052505050565b6000610e23610a6c565b9050610e2f8282610de8565b919050565b600067ffffffffffffffff821115610e4f57610e4e610db9565b5b610e5882610b5a565b9050602081019050919050565b82818337600083830152505050565b6000610e87610e8284610e34565b610e19565b905082815260208101848484011115610ea357610ea2610db4565b5b610eae848285610e65565b509392505050565b600082601f830112610ecb57610eca610daf565b5b8135610edb848260208601610e74565b91505092915050565b600080600060608486031215610efd57610efc610a76565b5b600084013567ffffffffffffffff811115610f1b57610f1a610a7b565b5b610f2786828701610eb6565b935050602084013567ffffffffffffffff811115610f4857610f47610a7b565b5b610f5486828701610eb6565b925050604084013567ffffffffffffffff811115610f7557610f74610a7b565b5b610f8186828701610eb6565b9150509250925092565b600082825260208201905092915050565b6000610fa782610b14565b610fb18185610f8b565b9350610fc1818560208601610b30565b610fca81610b5a565b840191505092915050565b600060a082019050610fea6000830188610a42565b8181036020830152610ffc8187610f9c565b905081810360408301526110108186610f9c565b905081810360608301526110248185610f9c565b90506110336080830184610a42565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107782610a38565b915061108283610a38565b925082820190508082111561109a5761109961103d565b5b92915050565b60006110ab82610a38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110dd576110dc61103d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061112f57607f821691505b602082108103611142576111416110e8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026111d97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261119c565b6111e3868361119c565b95508019841693508086168417925050509392505050565b6000819050919050565b600061122061121b61121684610a38565b6111fb565b610a38565b9050919050565b6000819050919050565b61123a83611205565b61124e61124682611227565b8484546111a9565b825550505050565b600090565b611263611256565b61126e818484611231565b505050565b5b818110156112925761128760008261125b565b600181019050611274565b5050565b601f8211156112d7576112a881611177565b6112b18461118c565b810160208510156112c0578190505b6112d46112cc8561118c565b830182611273565b50505b505050565b600082821c905092915050565b60006112fa600019846008026112dc565b1980831691505092915050565b600061131383836112e9565b9150826002028217905092915050565b61132c82610b14565b67ffffffffffffffff81111561134557611344610db9565b5b61134f8254611117565b61135a828285611296565b600060209050601f83116001811461138d576000841561137b578287015190505b6113858582611307565b8655506113ed565b601f19841661139b86611177565b60005b828110156113c35784890151825560018201915060208501945060208101905061139e565b868310156113e057848901516113dc601f8916826112e9565b8355505b6001600288020188555050505b50505050505056fea26469706673582212204fbdcce6ebb517896a9dd1d26063a877b1eb2a06168b29dca9621eb30724e70164736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80634b467bc7116100715780634b467bc7146101545780636e433ae214610172578063725ae3dc146101a3578063ad71f8dc146101c1578063d7b7f719146101dd578063e02c300914610211576100a9565b806313ca0050146100ae5780632a2d83d9146100cc57806339aeb9f2146100ea5780633eb76b9c1461011a5780634717f97c14610136575b600080fd5b6100b661022f565b6040516100c39190610a51565b60405180910390f35b6100d4610235565b6040516100e19190610a51565b60405180910390f35b61010460048036038101906100ff9190610aac565b61023e565b6040516101119190610a51565b60405180910390f35b610134600480360381019061012f9190610aac565b610249565b005b61013e61042c565b60405161014b9190610cbe565b60405180910390f35b61015c6106b6565b6040516101699190610a51565b60405180910390f35b61018c60048036038101906101879190610d3e565b6106bc565b60405161019a929190610d86565b60405180910390f35b6101ab6106ed565b6040516101b89190610a51565b60405180910390f35b6101db60048036038101906101d69190610ee4565b6106f3565b005b6101f760048036038101906101f29190610aac565b610835565b604051610208959493929190610fd5565b60405180910390f35b610219610a03565b6040516102269190610a51565b60405180910390f35b60005481565b60008054905090565b600080549050919050565b600054421180156102685750600154600054610265919061106c565b42105b1561029f576040517fdc6e686900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610326576040517f97e0293600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002548110610361576040517f336b558300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806040016040528060011515815260200182815250600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015590505060046000828152602001908152602001600020600401600081548092919061040c906110a0565b919050555060036000815480929190610424906110a0565b919050555050565b6060600060025467ffffffffffffffff81111561044c5761044b610db9565b5b60405190808252806020026020018201604052801561048557816020015b610472610a09565b81526020019060019003908161046a5790505b50905060005b6002548110156106ae57600460008281526020019081526020016000206040518060a0016040529081600082015481526020016001820180546104cd90611117565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990611117565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b5050505050815260200160028201805461055f90611117565b80601f016020809104026020016040519081016040528092919081815260200182805461058b90611117565b80156105d85780601f106105ad576101008083540402835291602001916105d8565b820191906000526020600020905b8154815290600101906020018083116105bb57829003601f168201915b505050505081526020016003820180546105f190611117565b80601f016020809104026020016040519081016040528092919081815260200182805461061d90611117565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b505050505081526020016004820154815250508282815181106106905761068f611148565b5b602002602001018190525080806106a6906110a0565b91505061048b565b508091505090565b60025481565b60056020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f209b526700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a00160405280600254815260200185815260200184815260200183815260200160008152509050600260008154809291906107b9906110a0565b91905055508060046000836000015181526020019081526020016000206000820151816000015560208201518160010190816107f59190611323565b50604082015181600201908161080b9190611323565b5060608201518160030190816108219190611323565b506080820151816004015590505050505050565b600460205280600052604060002060009150905080600001549080600101805461085e90611117565b80601f016020809104026020016040519081016040528092919081815260200182805461088a90611117565b80156108d75780601f106108ac576101008083540402835291602001916108d7565b820191906000526020600020905b8154815290600101906020018083116108ba57829003601f168201915b5050505050908060020180546108ec90611117565b80601f016020809104026020016040519081016040528092919081815260200182805461091890611117565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b50505050509080600301805461097a90611117565b80601f01602080910402602001604051908101604052809291908181526020018280546109a690611117565b80156109f35780601f106109c8576101008083540402835291602001916109f3565b820191906000526020600020905b8154815290600101906020018083116109d657829003601f168201915b5050505050908060040154905085565b60035481565b6040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b6000819050919050565b610a4b81610a38565b82525050565b6000602082019050610a666000830184610a42565b92915050565b6000604051905090565b600080fd5b600080fd5b610a8981610a38565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b600060208284031215610ac257610ac1610a76565b5b6000610ad084828501610a97565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b0e81610a38565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b4e578082015181840152602081019050610b33565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b7682610b14565b610b808185610b1f565b9350610b90818560208601610b30565b610b9981610b5a565b840191505092915050565b600060a083016000830151610bbc6000860182610b05565b5060208301518482036020860152610bd48282610b6b565b91505060408301518482036040860152610bee8282610b6b565b91505060608301518482036060860152610c088282610b6b565b9150506080830151610c1d6080860182610b05565b508091505092915050565b6000610c348383610ba4565b905092915050565b6000602082019050919050565b6000610c5482610ad9565b610c5e8185610ae4565b935083602082028501610c7085610af5565b8060005b85811015610cac5784840389528151610c8d8582610c28565b9450610c9883610c3c565b925060208a01995050600181019050610c74565b50829750879550505050505092915050565b60006020820190508181036000830152610cd88184610c49565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0b82610ce0565b9050919050565b610d1b81610d00565b8114610d2657600080fd5b50565b600081359050610d3881610d12565b92915050565b600060208284031215610d5457610d53610a76565b5b6000610d6284828501610d29565b91505092915050565b60008115159050919050565b610d8081610d6b565b82525050565b6000604082019050610d9b6000830185610d77565b610da86020830184610a42565b9392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610df182610b5a565b810181811067ffffffffffffffff82111715610e1057610e0f610db9565b5b80604052505050565b6000610e23610a6c565b9050610e2f8282610de8565b919050565b600067ffffffffffffffff821115610e4f57610e4e610db9565b5b610e5882610b5a565b9050602081019050919050565b82818337600083830152505050565b6000610e87610e8284610e34565b610e19565b905082815260208101848484011115610ea357610ea2610db4565b5b610eae848285610e65565b509392505050565b600082601f830112610ecb57610eca610daf565b5b8135610edb848260208601610e74565b91505092915050565b600080600060608486031215610efd57610efc610a76565b5b600084013567ffffffffffffffff811115610f1b57610f1a610a7b565b5b610f2786828701610eb6565b935050602084013567ffffffffffffffff811115610f4857610f47610a7b565b5b610f5486828701610eb6565b925050604084013567ffffffffffffffff811115610f7557610f74610a7b565b5b610f8186828701610eb6565b9150509250925092565b600082825260208201905092915050565b6000610fa782610b14565b610fb18185610f8b565b9350610fc1818560208601610b30565b610fca81610b5a565b840191505092915050565b600060a082019050610fea6000830188610a42565b8181036020830152610ffc8187610f9c565b905081810360408301526110108186610f9c565b905081810360608301526110248185610f9c565b90506110336080830184610a42565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107782610a38565b915061108283610a38565b925082820190508082111561109a5761109961103d565b5b92915050565b60006110ab82610a38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110dd576110dc61103d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061112f57607f821691505b602082108103611142576111416110e8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026111d97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261119c565b6111e3868361119c565b95508019841693508086168417925050509392505050565b6000819050919050565b600061122061121b61121684610a38565b6111fb565b610a38565b9050919050565b6000819050919050565b61123a83611205565b61124e61124682611227565b8484546111a9565b825550505050565b600090565b611263611256565b61126e818484611231565b505050565b5b818110156112925761128760008261125b565b600181019050611274565b5050565b601f8211156112d7576112a881611177565b6112b18461118c565b810160208510156112c0578190505b6112d46112cc8561118c565b830182611273565b50505b505050565b600082821c905092915050565b60006112fa600019846008026112dc565b1980831691505092915050565b600061131383836112e9565b9150826002028217905092915050565b61132c82610b14565b67ffffffffffffffff81111561134557611344610db9565b5b61134f8254611117565b61135a828285611296565b600060209050601f83116001811461138d576000841561137b578287015190505b6113858582611307565b8655506113ed565b601f19841661139b86611177565b60005b828110156113c35784890151825560018201915060208501945060208101905061139e565b868310156113e057848901516113dc601f8916826112e9565b8355505b6001600288020188555050505b50505050505056fea26469706673582212204fbdcce6ebb517896a9dd1d26063a877b1eb2a06168b29dca9621eb30724e70164736f6c63430008120033",
  "devdoc": {
    "author": "Abdulbasit Akingbade",
    "details": "A simple voting contract",
    "kind": "dev",
    "methods": {
      "addCandidate(string,string,string)": {
        "params": {
          "_description": "the description of the party",
          "_logoUrl": "the url of the party logo",
          "_partyName": "the name of the party"
        }
      },
      "castVote(uint256)": {
        "params": {
          "_candidateId": "the id of the candidate"
        }
      },
      "constructor": {
        "params": {
          "_nextElectionDate": "the next election date in seconds",
          "_votingPeriod": "the voting period in seconds"
        }
      }
    },
    "title": "DBallot",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14,
        "contract": "contracts/DBallot.sol:DBallot",
        "label": "s_nextElectionDate",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 16,
        "contract": "contracts/DBallot.sol:DBallot",
        "label": "s_votingPeriod",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 18,
        "contract": "contracts/DBallot.sol:DBallot",
        "label": "s_totalCandidatesCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/DBallot.sol:DBallot",
        "label": "s_totalVotes",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/DBallot.sol:DBallot",
        "label": "s_candidates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Candidate)41_storage)"
      },
      {
        "astId": 30,
        "contract": "contracts/DBallot.sol:DBallot",
        "label": "s_voters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Voter)46_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)46_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DBallot.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)46_storage"
      },
      "t_mapping(t_uint256,t_struct(Candidate)41_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DBallot.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)41_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)41_storage": {
        "encoding": "inplace",
        "label": "struct DBallot.Candidate",
        "members": [
          {
            "astId": 32,
            "contract": "contracts/DBallot.sol:DBallot",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34,
            "contract": "contracts/DBallot.sol:DBallot",
            "label": "partyName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 36,
            "contract": "contracts/DBallot.sol:DBallot",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 38,
            "contract": "contracts/DBallot.sol:DBallot",
            "label": "logoUrl",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 40,
            "contract": "contracts/DBallot.sol:DBallot",
            "label": "voteCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Voter)46_storage": {
        "encoding": "inplace",
        "label": "struct DBallot.Voter",
        "members": [
          {
            "astId": 43,
            "contract": "contracts/DBallot.sol:DBallot",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 45,
            "contract": "contracts/DBallot.sol:DBallot",
            "label": "candidateId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}