{
  "language": "Solidity",
  "sources": {
    "contracts/DBallot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/* Errors */\r\nerror DBallot__NotOwner();\r\nerror DBallot__VoterHasVoted();\r\nerror DBallot__InvalidCandidate();\r\nerror DBallot__VotingPeriodHasEnded();\r\nerror DBallot__NotElectionYear(uint256 _nextElectionYear);\r\nerror DBallot__ElectionHasStarted();\r\nerror DBallot__ElectionHasTakenPlace();\r\n\r\n/**\r\n * @title DBallot\r\n * @author Abdulbasit Akingbade\r\n * @dev A simple voting contract\r\n * @dev The contract owner declares the start date of the election for the current year\r\n * @dev The contract owner adds candidates for the current election year\r\n * @dev Voters can only vote during the voting period\r\n */\r\ncontract DBallot {\r\n    address private immutable i_owner;\r\n    uint256 private s_nextElectionYear; // TODO: update s_nextElectionYear after election\r\n    uint256 private s_tenureInYears;\r\n    // uint256 private s_electionStartDate;\r\n    mapping(uint256 => uint256) private s_electionStartDate;\r\n    // uint256 private s_totalCandidatesCount;\r\n    // mapping(uint256 => uint256) private s_totalCandidatesCount;\r\n    // uint256 private s_totalVotes;\r\n    mapping(uint256 => uint256) private s_totalVotes;\r\n\r\n    uint256 private s_electionDurationInHours;\r\n\r\n    // mapping(uint256 => Candidate) private s_candidates;\r\n    mapping(uint256 => Candidate[]) private s_candidates;\r\n    // mapping(address => Voter) public s_voters;\r\n    mapping(uint256 => mapping(address => Voter)) private s_voters;\r\n\r\n    struct Candidate {\r\n        uint256 id;\r\n        string name;\r\n        string description;\r\n        string logoUrl;\r\n        uint256 voteCount;\r\n    }\r\n\r\n    struct Voter {\r\n        bool hasVoted;\r\n        uint256 votedCandidateId /**candidateId of who they voted for */;\r\n    }\r\n\r\n    /* Events */\r\n    event CandidateAdded(\r\n        uint256 _id,\r\n        string _name,\r\n        string _description,\r\n        string _logoUrl,\r\n        uint256 _year\r\n    );\r\n    event VoteCasted(\r\n        address indexed _voter,\r\n        uint256 indexed _year,\r\n        uint256 _candidateId\r\n    );\r\n    event ElectionStarted(uint256 indexed _year, uint256 _startDate);\r\n\r\n    /* Modifiers */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != i_owner) revert DBallot__NotOwner();\r\n        _;\r\n    }\r\n\r\n    modifier validElectionYear() {\r\n        if (getCurrentYear() < s_nextElectionYear)\r\n            revert DBallot__NotElectionYear(s_nextElectionYear);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringVotingPeriod() {\r\n        if (\r\n            ((getCurrentYear() - s_nextElectionYear) % s_tenureInYears) != 0 ||\r\n            //(s_electionStartDate[getCurrentYear()] != 0 ||\r\n            block.timestamp < s_electionStartDate[getCurrentYear()] ||\r\n            block.timestamp >\r\n            s_electionStartDate[getCurrentYear()] +\r\n                (s_electionDurationInHours * 3600)\r\n        ) revert DBallot__VotingPeriodHasEnded();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param _tenureInYears the number of years before the next election takes place\r\n     */\r\n    constructor(uint256 _tenureInYears) {\r\n        i_owner = msg.sender;\r\n        s_tenureInYears = _tenureInYears;\r\n        s_nextElectionYear = getCurrentYear();\r\n    }\r\n\r\n    /**\r\n     * @dev Declares the start date of the election for the current year\r\n     * @dev Only the owner can call this function\r\n     * @dev The election can only be declared during an election year i.e past election year + tenure\r\n     * @param _electionDurationInHours the duration the\r\n     */\r\n    function startElection(\r\n        uint256 _electionDurationInHours\r\n    ) public onlyOwner validElectionYear {\r\n        uint256 currentYear = getCurrentYear();\r\n        if (s_electionStartDate[currentYear] != 0)\r\n            revert DBallot__ElectionHasTakenPlace();\r\n        uint256 time = block.timestamp;\r\n        s_electionStartDate[currentYear] = time;\r\n        s_electionDurationInHours = _electionDurationInHours;\r\n        //s_nextElectionYear = currentYear + s_tenureInYears;\r\n\r\n        emit ElectionStarted(currentYear, time);\r\n    }\r\n\r\n    // add candidates\r\n    /**\r\n     * @param _name the name of the party\r\n     * @param _description the description of the party\r\n     * @param _logoUrl the url of the party logo\r\n     * @dev Only the owner can call this function\r\n     * @dev Candidates can only be added during an election year\r\n     */\r\n    function addCandidate(\r\n        string memory _name,\r\n        string memory _description,\r\n        string memory _logoUrl\r\n    ) public onlyOwner validElectionYear {\r\n        if (\r\n            s_electionStartDate[getCurrentYear()] != 0 &&\r\n            block.timestamp > s_electionStartDate[getCurrentYear()]\r\n        ) revert DBallot__ElectionHasStarted();\r\n        require(bytes(_name).length > 0, \"DBallot: party name cannot be empty\");\r\n        // Check if candidate with the same party name already exists\r\n        Candidate[] memory candidates = s_candidates[getCurrentYear()];\r\n        for (uint i = 0; i < candidates.length; i++) {\r\n            if (\r\n                keccak256(bytes(candidates[i].name)) == keccak256(bytes(_name))\r\n            ) {\r\n                revert(\"Candidate with same party name already exists\");\r\n            }\r\n        }\r\n        Candidate memory candidate = Candidate({\r\n            id: getTotalCandidatesCount(getCurrentYear()),\r\n            name: _name,\r\n            description: _description,\r\n            logoUrl: _logoUrl,\r\n            voteCount: 0\r\n        });\r\n        s_candidates[getCurrentYear()].push(candidate);\r\n\r\n        emit CandidateAdded(\r\n            candidate.id,\r\n            candidate.name,\r\n            candidate.description,\r\n            candidate.logoUrl,\r\n            getCurrentYear()\r\n        );\r\n    }\r\n\r\n    // vote\r\n    /**\r\n     * @param _candidateId the id of the candidate\r\n     * @dev Votes can only be casted during the voting period\r\n     * @dev i.e during an election, after the start date and before the voting period ends\r\n     */\r\n    function castVote(uint256 _candidateId) public onlyDuringVotingPeriod {\r\n        // require that they haven't voted before\r\n        if (s_voters[getCurrentYear()][msg.sender].hasVoted)\r\n            revert DBallot__VoterHasVoted();\r\n        // require a valid candidate\r\n        if (_candidateId >= getTotalCandidatesCount(getCurrentYear()))\r\n            revert DBallot__InvalidCandidate();\r\n        // record that voter has voted\r\n        s_voters[getCurrentYear()][msg.sender] = Voter({\r\n            hasVoted: true,\r\n            votedCandidateId: _candidateId\r\n        });\r\n        // update candidate vote Count\r\n        s_candidates[getCurrentYear()][_candidateId].voteCount++;\r\n        s_totalVotes[getCurrentYear()]++;\r\n\r\n        emit VoteCasted(msg.sender, _candidateId, getCurrentYear());\r\n    }\r\n\r\n    // get results\r\n    /*function getResults(\r\n        uint256 _electionYear\r\n    ) public view returns (Candidate[] memory) {\r\n        Candidate[] memory results = new Candidate[](\r\n            getTotalCandidatesCount(_electionYear)\r\n        );\r\n        for (uint256 i = 0; i < getTotalCandidatesCount(_electionYear); i++) {\r\n            results[i].id = s_candidates[_electionYear][i].id;\r\n            results[i].name = s_candidates[_electionYear][i].name;\r\n            results[i].voteCount = s_candidates[_electionYear][i].voteCount;\r\n        }\r\n        return results;\r\n    }*/\r\n\r\n    /* Setters */\r\n    // function setNextElectionDate(uint256) public view returns (uint256) {\r\n    //     return s_nextElectionYear;\r\n    // }\r\n\r\n    /* View / Pure functions */\r\n\r\n    /**\r\n     * @notice assumes that a year is exactly 365 days long,\r\n     *         which is not strictly true due to leap years\r\n     * @return the current year\r\n     */\r\n    function getCurrentYear() internal view returns (uint256) {\r\n        uint256 yearsSince1970 = block.timestamp / 365 days;\r\n        return 1970 + yearsSince1970;\r\n    }\r\n\r\n    /**\r\n     * @return the next election year\r\n     */\r\n    function getNextElectionYear() public view returns (uint256) {\r\n        return s_nextElectionYear;\r\n    }\r\n\r\n    /**\r\n     * @dev gets the total number of candidates for the given election year\r\n     * @param _electionYear the year of the election\r\n     */\r\n    function getTotalCandidatesCount(\r\n        uint256 _electionYear\r\n    ) public view returns (uint256) {\r\n        return s_candidates[_electionYear].length;\r\n    }\r\n\r\n    /**\r\n     * @dev gets the total number of votes casted for the given election year\r\n     * @param _electionYear the year of the election\r\n     */\r\n    function getTotalVotes(\r\n        uint256 _electionYear\r\n    ) public view returns (uint256) {\r\n        return s_totalVotes[_electionYear];\r\n    }\r\n\r\n    /**\r\n     * @param _electionYear the year of the election\r\n     * @return the start date of the election for the given year\r\n     */\r\n    function getElectionStartDate(\r\n        uint256 _electionYear\r\n    ) public view returns (uint256) {\r\n        return s_electionStartDate[_electionYear];\r\n    }\r\n\r\n    /**\r\n     * @param _electionYear the year of the election\r\n     * @param _voterAddress the address of the voter\r\n     * @return the voter details\r\n     */\r\n    function getVoter(\r\n        uint256 _electionYear,\r\n        address _voterAddress\r\n    ) public view returns (Voter memory) {\r\n        Voter memory voter = s_voters[_electionYear][_voterAddress];\r\n        return voter;\r\n    }\r\n\r\n    function getElectionWinner(\r\n        uint256 _electionYear\r\n    ) public view returns (Candidate memory) {\r\n        Candidate[] memory candidates = s_candidates[_electionYear];\r\n        Candidate memory winner = candidates[0];\r\n        for (uint256 i = 1; i < getTotalCandidatesCount(_electionYear); i++) {\r\n            if (candidates[i].voteCount > winner.voteCount) {\r\n                winner = candidates[i];\r\n            }\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    /**\r\n     * @param _electionYear the year of the election\r\n     * @param _candidateId the id of the candidate\r\n     * @return the candidate details\r\n     */\r\n    function getCandidate(\r\n        uint256 _electionYear,\r\n        uint256 _candidateId\r\n    ) public view returns (Candidate memory) {\r\n        require(\r\n            _candidateId < getTotalCandidatesCount(_electionYear),\r\n            \"Invalid candidate ID\"\r\n        );\r\n        Candidate memory candidate = s_candidates[_electionYear][_candidateId];\r\n        return candidate;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}